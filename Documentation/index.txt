Fjor
====

Setting up Fjor:

	$fjor = new \Fjor\Dsl\Dsl(new \Fjor\ObjectFactory\GenericObjectFactory());

This will create a new instance of Fjor using a fluent interface. This guide will
explain how you can use it. This is also the supported API.

Getting an instance of a class:

	$fjor->get('MyClass');

If only one instance is needed:

	$fjor->setSingleton('MyClass');

This will ensure the same instance is returned every time.

Dependencies are automatically injected if a class is specified as a type hint. In the
following example Fjor knows an instance of `Bar` is needed:

	class Foo {
		public function __construct(Bar $bar) {}
	}

	class Bar
	{}

If a parameter is optional there will be no value injected if not specified:

	class Foo {
		public function __construct(Bar $bar = null) {}
	}

If a parameter type hint is an interface you can tell Fjor what class to use as
implementation. Given following:

	interface Hero {
		public function help($name);
	}

	class Batman implements Hero {
		public function help($name) {
			echo "Starting batmobile on my way to help $name"; 
		}
	}

	class Movie {
		private $hero;

		public function __construct(Hero $hero) {
			$this->hero = $hero;
		}

		public function addHeroicAction() {
			$this->hero->help('citizen in trouble');
		}
	}

Constructing a movie presents a problem to Fjor because it can't instantiate an
interface. We need to specify what implementation it should use when it encounters
a `Hero`:

	$fjor->given('Hero')->thenUse('Batman');

When Fjor now encounters a `Hero` it knows we want to use `Batman` as our hero. If
you already have a real Batman you can register him as implementation too:

	$batman = new Batman();
	$fjor->given('Hero')->thenUse($batman);

Everytime Fjor needs a `Hero` it will use this instance. If you would like Fjor to
create one instance only of a certain class or interface you don't need to have
your own instance and register that. This will do:

	$fjor->setSingleton('Batman');

Fjor will now create only one instance of Batman and use it whenever a `Batman` is
needed. The same is true for interfaces:

	$fjor->setSingleton('Hero');
	$fjor->given('Hero')->thenUse('Batman');

This will provide only one `Batman` instance every time a `Hero` is called for.

The previous examples will allow to construct an object when a type hint is specified
as interface or (abstract) class. This will ensure that constructor dependencies are
injected automagically. The objects will be autowired together. Sometimes you need to
specify another type of constructor value though, such as an integer when an ID is
asked for.

	class Catwomen {
		public function __construct($numberOfLives) {}
	}

If you want to use Catwomen giving her nine lives you can do it with this code:

	$fjor->given('Catwomen')->constructWith(array(9));

`ConstructWith` takes an array as argument filled with the values that Fjor will
use upon construction of the object. The keys determine the position of the argument,
using 0 as first argument. This is also the way to specify which position the value
should be injected:

	class Batman {
		public function __construct(Sidekick $sidekick, $name) {}
	}

	$fjor->given('Batman')->constructWith(array(1 => 'Bruce Wayne'));

Now Fjor will create Batman with 'Bruce Wayne' as second argument value. This works
also for bindings. Given the same Batman specification as above you can specify that
`Batman` needs to be constructed with `Robin` as sidekick:

	class Robin implements Sidekick {}

	$fjor->given('Batman')->constructWith(array('Robin', 'Bruce Wayne'));

Fjor is smart enough to understand that the first constructor argument for `Batman`
needs to be an object of type `Sidekick`. It will first look at the arguments that
were specified for construction of the object before it will look at what was specified
as a general binding.

Not only constructor arguments can be specified. If you need to add values to a given
method right after creation it's possible to tell Fjor to inject them:

	$fjor->given('Batman')->andMethod('goGet')->addParam($joker);

After Fjor has created Batman it will call method `goGet` with `$joker` as parameter. As
with constructors this can be a real value or the name of a class Fjor should create
first.

Multiple calls to the method are possible:

	$fjor->given('Batman')->andMethod('goGet')
		->addParam($joker)
		->addParam($harleyQuinn);